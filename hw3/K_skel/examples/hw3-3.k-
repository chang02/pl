let proc leaf (n) =
	{ v := n, l := {}, r := {} }
in
let proc makeLtree (n, lt) =
	{ v := n, l := lt, r := {} }
in
let proc makeRtree (n, rt) =
	{ v := n, l := {}, r := rt }
in
let proc makeTree (n, lt, rt) =
	{ v := n, l := lt, r := rt }
in
let proc isEmpty (t) =
    if t = {} then true else false
in
let proc rTree (t) =
    if isEmpty (t) then unit else t.r
in
let proc lTree (t) =
    if isEmpty (t) then unit else t.l
in
let proc nodeVal (t) =
    if isEmpty (t) then unit else t.v
in
let proc dft (t) =
    if (isEmpty (t)) then unit else ((write (nodeVal (t))) ; (dft (lTree(t))) ; (dft (rTree(t))))
in
let proc height (t) =
    if (isEmpty (t)) then 0
	else
    (
     let lh := (height (lTree(t))) in
     let rh := (height (rTree(t))) in
     (if (lh < rh) then (rh+1) else (lh+1))
    )
in
let proc printTheLevel (t, l) =
    if (isEmpty(t)) then unit else(
        if (l=1) then (write nodeVal (t)) else(
            printTheLevel (lTree(t), l-1);
            printTheLevel (rTree(t), l-1)
            )
        )
in
let proc bft (t) =
    let h := height(t) in
    let i := 1 in
    while (not (h+1 = i)) do (
        printTheLevel(t, i);
        i := i+1
    )
in
let t1 := makeTree (1, leaf(2), leaf(3)) in 
let t0 := makeTree (0, t1, leaf(4)) in 
bft (t0)
